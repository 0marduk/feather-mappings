CLASS eq net/minecraft/util/math/BlockPos
	CLASS eq$a Mutable
		FIELD b x I
		FIELD c y I
		FIELD d z I
		METHOD <init> (III)V
			ARG 0 x
			ARG 1 y
			ARG 2 z
		METHOD a add (DDD)Leq;
			ARG 0 x
			ARG 1 y
			ARG 2 z
		METHOD a set (Lafh;)Leq$a;
		METHOD a offset (Lev;I)Leq;
			ARG 0 facing
			ARG 1 distance
		METHOD b add (III)Leq;
			ARG 0 x
			ARG 1 y
			ARG 2 z
		METHOD c set (DDD)Leq$a;
		METHOD c setOffset (Lev;)Leq$a;
		METHOD c setOffset (Lev;I)Leq$a;
		METHOD d set (III)Leq$a;
		METHOD d crossProduct (Lfk;)Lfk;
			ARG 0 vec
		METHOD g set (Lfk;)Leq$a;
		METHOD h toImmutable ()Leq;
		METHOD o getX ()I
		METHOD p getY ()I
		METHOD p setY (I)V
		METHOD q getZ ()I
	CLASS eq$b PooledMutable
		FIELD g POOL Ljava/util/List;
		METHOD <init> (III)V
			ARG 0 x
			ARG 1 y
			ARG 2 z
		METHOD a set (Lafh;)Leq$a;
		METHOD c set (DDD)Leq$a;
		METHOD c set (Lafh;)Leq$b;
		METHOD c setOffset (Lev;)Leq$a;
		METHOD c setOffset (Lev;I)Leq$a;
		METHOD d get (DDD)Leq$b;
		METHOD d set (III)Leq$a;
		METHOD d setOffset (Lev;)Leq$b;
		METHOD d setOffset (Lev;I)Leq$b;
		METHOD e set (DDD)Leq$b;
		METHOD f get (III)Leq$b;
		METHOD g set (Lfk;)Leq$a;
		METHOD j set (Lfk;)Leq$b;
		METHOD r get ()Leq$b;
	FIELD a ORIGIN Leq;
	FIELD c BITS_X I
	FIELD f BITS_Y I
	METHOD <init> (DDD)V
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD <init> (III)V
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD <init> (Lafh;)V
		ARG 0 entity
	METHOD <init> (Lchc;)V
		ARG 0 vec
	METHOD <init> (Lfk;)V
		ARG 0 vec
	METHOD a add (DDD)Leq;
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD a iterateBoxPositions (Leq;Leq;)Ljava/lang/Iterable;
		ARG 0 pos1
		ARG 1 pos2
	METHOD a offset (Lev;)Leq;
		ARG 0 facing
	METHOD a offset (Lev;I)Leq;
		ARG 0 facing
		ARG 1 distance
	METHOD a add (Lfk;)Leq;
		ARG 0 vec
	METHOD b up ()Leq;
	METHOD b up (I)Leq;
		ARG 0 distance
	METHOD b add (III)Leq;
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD b iterateBoxPositionsMutable (Leq;Leq;)Ljava/lang/Iterable;
		ARG 0 pos1
		ARG 1 pos2
	METHOD b subtract (Lfk;)Leq;
		ARG 0 vec
	METHOD c down ()Leq;
	METHOD c down (I)Leq;
		ARG 0 distance
	METHOD c crossProduct (Lfk;)Leq;
		ARG 0 vec
	METHOD d north ()Leq;
	METHOD d north (I)Leq;
		ARG 0 distance
	METHOD d crossProduct (Lfk;)Lfk;
		ARG 0 vec
	METHOD e south ()Leq;
	METHOD e south (I)Leq;
		ARG 0 distance
	METHOD f west ()Leq;
	METHOD f west (I)Leq;
		ARG 0 distance
	METHOD g east ()Leq;
	METHOD g east (I)Leq;
		ARG 0 distance
	METHOD h toImmutable ()Leq;
